@startuml
interface PlayerSystem {
    +handler : Object
    +name : String
    +enabled : boolean
}

abstract class LevelSystem  implements PlayerSystem {
    #LevelSystem(ExpLevelConverter)
    __
    +{abstract} exp : int
    +{abstract} level : int
    ..
    +fractionalExp : double
    __
    +decreaseLevel(int) : void
    +increaseLevel(int) : void
    +didReachLevel(int) : void
    +takeExp(int) : void
    +hasExp(int) : void
    +getExpToNextLevel() : int
    +getConverter() : ExpLevelConverter
}

abstract class ExpLevelConverter {
    +expToFullLevel(int) : int
    +expToLevel(int) : double
    +levelToExp(int) : int
    +getExpToReachNextLevel(int) : int
}

abstract class ClassSystem implements PlayerSystem {
    +{abstract} getClasses() : List<String>
    ..
    +hasClass() : boolean
    +hasOneOfRequiredClasses(List<String>) : boolean
    +hasAllRequiredClasses(List<String>) : boolean
    +hasRequiredClass(String) : boolean
    +getPrimaryClass() : String
}

class SystemFactory<T extends PlayerSystem> {
    +SystemFactory(Function<Object, ? extends T>)
    __
    get(Object) : T
}

class ClassSystem.Factory<ClassSystem> extends SystemFactory {
    +Factory(Function<Object, ? extends ClassSystem>)
}

class LevelSystem.Factory<LevelSystem> extends SystemFactory {
    +Factory(Function<Object, ? extends LevelSystem>)
}

ExpLevelConverter <--* LevelSystem
ClassSystem +-- ClassSystem.Factory
LevelSystem +-- LevelSystem.Factory
@enduml